{"version":3,"sources":["webpack:///./src/app/todopage/edittodo.module.ts","webpack:///./src/app/todopage/edittodo.page.html","webpack:///./src/app/todopage/edittodo.page.scss","webpack:///./src/app/todopage/edittodo.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEE;AAE/C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2DAAY;KACxB;CACF,CAAC;AAWF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAT9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,2DAAY,CAAC;SAC7B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB/B,qcAAqc,2EAA2E,gBAAgB,mDAAmD,sBAAsB,sjE;;;;;;;;;;;ACAzmB,+DAA+D,2I;;;;;;;;;;;;;;;;;;;;;ACAb;AACc;AAC1B;AACoB;AAO1D;IASE,sBAAoB,OAAsB,EAAU,SAA0B,EAC1D,EAAoB,EAAU,SAA2B;QADzD,YAAO,GAAP,OAAO,CAAe;QAAU,cAAS,GAAT,SAAS,CAAiB;QAC1D,OAAE,GAAF,EAAE,CAAkB;QAAU,cAAS,GAAT,SAAS,CAAkB;QAP7E,UAAK,GAAU,EAAE,CAAC;QAShB,IAAI,CAAC,MAAM,GAAG,6CAAa,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC;IAEhD,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAcC;QAbC,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,cAAI;YAE7B,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,WAAC;gBACrB,OAAO;oBACL,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACpB,MAAM,EAAE,KAAK;oBACb,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;oBACxC,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,aAAa,CAAC;iBACpD,CAAC;YACL,CAAC,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;QAE1B,CAAC,CAAC,CAAC;IACL,CAAC;IAGC,mCAAY,GAAZ,UAAa,KAAK;QAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,iCAAU,GAAV,UAAW,MAAM;QACf,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC;QACxC,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,eAAe,CAAC;IAEtD,CAAC;IAED,mCAAY,GAAZ,UAAa,SAAS;QACpB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC;QACtC,MAAM,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC,eAAe,CAAC;QAClD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACtC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;IAC3B,CAAC;IAGH,gCAAS,GAAT;QAEE,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,CAAC;IAC9F,CAAC;IAED,iCAAU,GAAV,UAAW,QAAQ,EAAC,MAAM;QAEvB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnG,CAAC;IAED,iCAAU,GAAV,UAAW,SAAS;QACnB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5F,CAAC;IACD,6BAAM,GAAN;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5C,CAAC;IACF,iCAAU,GAAV;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACzC,CAAC;IAvES,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,kGAAmC;;SAEpC,CAAC;+EAU6B,4DAAa,EAAqB,8DAAe;YACtD,wEAAgB,EAAqB,wEAAgB;OAVlE,YAAY,CAwErB;IAAD,mBAAC;CAAA;AAxEqB","file":"todopage-edittodo-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EdittodoPage } from './edittodo.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EdittodoPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [EdittodoPage]\n})\nexport class EdittodoPageModule {}\n","module.exports = \"<ion-header>\\n    <ion-toolbar>\\n       <ion-title>ToDo</ion-title><ion-buttons slot=\\\"end\\\">\\n           <ion-button fill=\\\"clear\\\" slot=\\\"icon-only\\\" (click)=\\\"goback()\\\">\\n             <ion-icon name=\\\"arrow-back\\\"></ion-icon>\\n           </ion-button>\\n         </ion-buttons>\\n       </ion-toolbar>\\n       </ion-header>\\n   \\n  <ion-content padding>\\n    <ion-card *ngFor=\\\"let item of tests\\\">\\n      <span *ngIf=\\\"!item.isEdit; else elseBlock\\\">\\n        <ion-card-header>\\n          <ion-card-title>{{item.TitleName}} </ion-card-title>\\n          <ion-card-subtitle>{{item.TaskDescription}} </ion-card-subtitle>\\n        </ion-card-header>\\n        <ion-card-content>\\n   \\n          <ion-button shape=\\\"round\\\" color=\\\"secondary\\\" size=\\\"small\\\" (click)=\\\"EditRecord(item)\\\">\\n            <ion-icon size=\\\"small\\\" slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n   \\n          </ion-button>\\n          <ion-button shape=\\\"round\\\" color=\\\"danger\\\" size=\\\"small\\\" (click)=\\\"RemoveRecord(item.id)\\\">\\n            <ion-icon size=\\\"small\\\" slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n   \\n          </ion-button>\\n        </ion-card-content>\\n      </span>\\n      <ng-template #elseBlock>\\n        <ion-card-header>\\n          <ion-card-title>\\n            <ion-grid>\\n              <ion-row>\\n                <ion-col>\\n                  Edit\\n                </ion-col>\\n                <ion-col>\\n                  <ion-button fill=\\\"clear\\\" color=\\\"medium\\\" size=\\\"small\\\" (click)=\\\"item.isEdit = false\\\">\\n                    Cancel\\n                  </ion-button>\\n                </ion-col>\\n                <ion-col>\\n                  <ion-button fill=\\\"outline\\\" color=\\\"success\\\" size=\\\"small\\\" (click)=\\\"updateRecord(item)\\\">\\n                    Update\\n                  </ion-button>\\n                </ion-col>\\n              </ion-row>\\n            </ion-grid>\\n          </ion-card-title>\\n        </ion-card-header>\\n        <ion-card-content>\\n          <ion-item>\\n            <ion-label><strong>Title</strong></ion-label>\\n            <ion-input type=\\\"text\\\" [(ngModel)]=\\\"item.TitleName\\\"></ion-input>\\n          </ion-item>\\n          <ion-item>\\n            <ion-label><strong>Description</strong></ion-label>\\n            <ion-input type=\\\"text\\\" [(ngModel)]=\\\"item.TaskDescription\\\"></ion-input>\\n          </ion-item>\\n          \\n        </ion-card-content>\\n      </ng-template>\\n    </ion-card>\\n   <!--  floating action button -->\\n  <ion-fab horizontal=\\\"end\\\" vertical=\\\"bottom\\\" slot=\\\"fixed\\\" (click)=\\\"addnewTodo()\\\">\\n    <ion-fab-button color=\\\"danger\\\">\\n      <ion-icon name=\\\"add\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n  </ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3RvZG9wYWdlL2VkaXR0b2RvLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController, NavController } from '@ionic/angular';\nimport * as firebase from 'firebase' ;\nimport { AngularFirestore} from '@angular/fire/firestore';\nimport { CrudService } from '../crud.service';\n@Component({\n  selector: 'app-edittodo',\n  templateUrl: './edittodo.page.html',\n  styleUrls: ['./edittodo.page.scss'],\n})\nexport class EdittodoPage implements OnInit {\n\n  userId: string;\n  todos: any[] = [];\n  // test\n  tests: any;\n  TitleName: string;\n  TaskDescription: number;\n  \n  constructor(private navCtrl: NavController, private toastCtrl: ToastController,\n              private db: AngularFirestore, private firestore: AngularFirestore)\n {\n    this.userId = firebase.auth().currentUser.uid;\n  \n  }\n \n  ngOnInit() {\n    this.readTasks().subscribe(data => {\n \n      this.tests = data.map(e => {\n        return {\n          id: e.payload.doc.id,\n          isEdit: false,\n          TitleName: e.payload.doc.data()['Title'],\n          TaskDescription: e.payload.doc.data()['Description'],\n         };\n      })\n      console.log(this.tests);\n \n    });\n  }\n   \n   \n    RemoveRecord(rowID) {\n      this.deleteTask(rowID);\n    }\n   \n    EditRecord(record) {\n      record.isEdit = true;\n      record.EditTitleName = record.TitleName;\n      record.EditTaskDescription = record.TaskDescription;\n      \n    }\n   \n    updateRecord(recordRow) {\n      let record = {};\n      record['Title'] = recordRow.TitleName;\n      record['Description'] = recordRow.TaskDescription;\n      this.updateTask(recordRow.id, record);\n      recordRow.isEdit = false;\n    }\n  \n \n  readTasks() {\n    \n    return this.db.collection('tests').doc('subtest').collection(this.userId).snapshotChanges();\n  }\n \n  updateTask(recordID,record){\n  \n     this.db.collection('tests').doc('subtest').collection(this.userId).doc(recordID).update(record);\n  }\n \n  deleteTask(record_id) {\n   this.db.collection('tests').doc('subtest').collection(this.userId).doc(record_id).delete();\n  }\n  goback(){\n    this.navCtrl.navigateForward(['/apphome']);\n   }\n  addnewTodo() {\n    this.navCtrl.navigateForward(['/home']);\n   }\n   }\n"],"sourceRoot":""}