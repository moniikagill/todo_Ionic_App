{"version":3,"sources":["webpack:///./node_modules/ng-circle-progress/index.js","webpack:///./src/app/timer/timer.module.ts","webpack:///./src/app/timer/timer.page.html","webpack:///./src/app/timer/timer.page.scss","webpack:///./src/app/timer/timer.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqG;AAC5C;AAC5B;;AAE7B;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,2BAA2B,EAAE,cAAc;AAC3C;AACA,2BAA2B,EAAE,kBAAkB;AAC/C;AACA,2BAA2B,EAAE;AAC7B;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,6BAA6B,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,6BAA6B,EAAE;AAC5D;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA,uCAAuC,uDAAuD;AAC9F;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA,0CAA0C,uDAAuD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE,sBAAsB,EAAE,qBAAqB,EAAE;AAC5E,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2CAA2C,kDAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,kDAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,sCAAsC,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,+BAA+B,EAAE;AACjC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,8CAA8C,wDAAwD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,EAAE,eAAe,kDAAK;AACrD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,kDAAkD,EAAE,uCAAuC,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"timer-timer-module.js","sourcesContent":["import { Component, ElementRef, EventEmitter, Inject, Input, NgModule, Output } from '@angular/core';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { timer } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\nvar CircleProgressOptions = /** @class */ (function () {\r\n    function CircleProgressOptions() {\r\n        this.class = '';\r\n        this.backgroundGradient = false;\r\n        this.backgroundColor = 'transparent';\r\n        this.backgroundGradientStopColor = 'transparent';\r\n        this.backgroundOpacity = 1;\r\n        this.backgroundStroke = 'transparent';\r\n        this.backgroundStrokeWidth = 0;\r\n        this.backgroundPadding = 5;\r\n        this.percent = 0;\r\n        this.radius = 90;\r\n        this.space = 4;\r\n        this.toFixed = 0;\r\n        this.maxPercent = 1000;\r\n        this.renderOnClick = true;\r\n        this.units = '%';\r\n        this.unitsFontSize = '10';\r\n        this.unitsFontWeight = 'normal';\r\n        this.unitsColor = '#444444';\r\n        this.outerStrokeGradient = false;\r\n        this.outerStrokeWidth = 8;\r\n        this.outerStrokeColor = '#78C000';\r\n        this.outerStrokeGradientStopColor = 'transparent';\r\n        this.outerStrokeLinecap = 'round';\r\n        this.innerStrokeColor = '#C7E596';\r\n        this.innerStrokeWidth = 4;\r\n        this.titleFormat = undefined;\r\n        this.title = 'auto';\r\n        this.titleColor = '#444444';\r\n        this.titleFontSize = '20';\r\n        this.titleFontWeight = 'normal';\r\n        this.subtitleFormat = undefined;\r\n        this.subtitle = 'progress';\r\n        this.subtitleColor = '#A9A9A9';\r\n        this.subtitleFontSize = '10';\r\n        this.subtitleFontWeight = 'normal';\r\n        this.imageSrc = undefined;\r\n        this.imageHeight = undefined;\r\n        this.imageWidth = undefined;\r\n        this.animation = true;\r\n        this.animateTitle = true;\r\n        this.animateSubtitle = false;\r\n        this.animationDuration = 500;\r\n        this.showTitle = true;\r\n        this.showSubtitle = true;\r\n        this.showUnits = true;\r\n        this.showImage = false;\r\n        this.showBackground = true;\r\n        this.showInnerStroke = true;\r\n        this.clockwise = true;\r\n        this.responsive = false;\r\n        this.startFromZero = true;\r\n        this.showZeroOuterStroke = true;\r\n        this.lazy = true;\r\n    }\r\n    return CircleProgressOptions;\r\n}());\r\n/**\r\n * \\@dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351\r\n */\r\nvar CircleProgressComponent = /** @class */ (function () {\r\n    function CircleProgressComponent(defaultOptions, elRef, document) {\r\n        var _this = this;\r\n        this.elRef = elRef;\r\n        this.document = document;\r\n        this.onClick = new EventEmitter();\r\n        // <svg> of component\r\n        this.svgElement = null;\r\n        // whether <svg> is in viewport\r\n        this.isInViewport = false;\r\n        // event for notifying viewport change caused by scrolling or resizing\r\n        this.onViewportChanged = new EventEmitter;\r\n        this._viewportChangedSubscriber = null;\r\n        this.options = new CircleProgressOptions();\r\n        this.defaultOptions = new CircleProgressOptions();\r\n        this._lastPercent = 0;\r\n        this._gradientUUID = null;\r\n        this.render = function () {\r\n            _this.applyOptions();\r\n            if (_this.options.lazy) {\r\n                // Draw svg if it doesn't exist\r\n                // Draw svg if it doesn't exist\r\n                _this.svgElement === null && _this.draw(_this._lastPercent);\r\n                // Draw it only when it's in the viewport\r\n                if (_this.isInViewport) {\r\n                    // Draw it at the latest position when I am in.\r\n                    if (_this.options.animation && _this.options.animationDuration > 0) {\r\n                        _this.animate(_this._lastPercent, _this.options.percent);\r\n                    }\r\n                    else {\r\n                        _this.draw(_this.options.percent);\r\n                    }\r\n                    _this._lastPercent = _this.options.percent;\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.animation && _this.options.animationDuration > 0) {\r\n                    _this.animate(_this._lastPercent, _this.options.percent);\r\n                }\r\n                else {\r\n                    _this.draw(_this.options.percent);\r\n                }\r\n                _this._lastPercent = _this.options.percent;\r\n            }\r\n        };\r\n        this.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\r\n            var /** @type {?} */ angleInRadius = angleInDegrees * Math.PI / 180;\r\n            var /** @type {?} */ x = centerX + Math.sin(angleInRadius) * radius;\r\n            var /** @type {?} */ y = centerY - Math.cos(angleInRadius) * radius;\r\n            return { x: x, y: y };\r\n        };\r\n        this.draw = function (percent) {\r\n            // make percent reasonable\r\n            percent = (percent === undefined) ? _this.options.percent : Math.abs(percent);\r\n            // circle percent shouldn't be greater than 100%.\r\n            var /** @type {?} */ circlePercent = (percent > 100) ? 100 : percent;\r\n            // determine box size\r\n            var /** @type {?} */ boxSize = _this.options.radius * 2 + _this.options.outerStrokeWidth * 2;\r\n            if (_this.options.showBackground) {\r\n                boxSize += (_this.options.backgroundStrokeWidth * 2 + _this.max(0, _this.options.backgroundPadding * 2));\r\n            }\r\n            // the centre of the circle\r\n            var /** @type {?} */ centre = { x: boxSize / 2, y: boxSize / 2 };\r\n            // the start point of the arc\r\n            var /** @type {?} */ startPoint = { x: centre.x, y: centre.y - _this.options.radius };\r\n            // get the end point of the arc\r\n            var /** @type {?} */ endPoint = _this.polarToCartesian(centre.x, centre.y, _this.options.radius, 360 * (_this.options.clockwise ?\r\n                circlePercent :\r\n                (100 - circlePercent)) / 100); // ####################\r\n            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.\r\n            if (circlePercent === 100) {\r\n                endPoint.x = endPoint.x + (_this.options.clockwise ? -0.01 : +0.01);\r\n            }\r\n            // largeArcFlag and sweepFlag\r\n            var /** @type {?} */ largeArcFlag, /** @type {?} */ sweepFlag;\r\n            if (circlePercent > 50) {\r\n                _a = _this.options.clockwise ? [1, 1] : [1, 0], largeArcFlag = _a[0], sweepFlag = _a[1];\r\n            }\r\n            else {\r\n                _b = _this.options.clockwise ? [0, 1] : [0, 0], largeArcFlag = _b[0], sweepFlag = _b[1];\r\n            }\r\n            // percent may not equal the actual percent\r\n            var /** @type {?} */ titlePercent = _this.options.animateTitle ? percent : _this.options.percent;\r\n            var /** @type {?} */ titleTextPercent = titlePercent > _this.options.maxPercent ?\r\n                _this.options.maxPercent.toFixed(_this.options.toFixed) + \"+\" : titlePercent.toFixed(_this.options.toFixed);\r\n            var /** @type {?} */ subtitlePercent = _this.options.animateSubtitle ? percent : _this.options.percent;\r\n            // get title object\r\n            var /** @type {?} */ title = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: _this.options.titleColor,\r\n                fontSize: _this.options.titleFontSize,\r\n                fontWeight: _this.options.titleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both title and titleFormat(...) may be an array of string.\r\n            if (_this.options.titleFormat !== undefined && _this.options.titleFormat.constructor.name === 'Function') {\r\n                var /** @type {?} */ formatted = _this.options.titleFormat(titlePercent);\r\n                if (formatted instanceof Array) {\r\n                    title.texts = formatted.slice();\r\n                }\r\n                else {\r\n                    title.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.title === 'auto') {\r\n                    title.texts.push(titleTextPercent);\r\n                }\r\n                else {\r\n                    if (_this.options.title instanceof Array) {\r\n                        title.texts = _this.options.title.slice();\r\n                    }\r\n                    else {\r\n                        title.texts.push(_this.options.title.toString());\r\n                    }\r\n                }\r\n            }\r\n            // get subtitle object\r\n            var /** @type {?} */ subtitle = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: _this.options.subtitleColor,\r\n                fontSize: _this.options.subtitleFontSize,\r\n                fontWeight: _this.options.subtitleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.\r\n            if (_this.options.subtitleFormat !== undefined && _this.options.subtitleFormat.constructor.name === 'Function') {\r\n                var /** @type {?} */ formatted = _this.options.subtitleFormat(subtitlePercent);\r\n                if (formatted instanceof Array) {\r\n                    subtitle.texts = formatted.slice();\r\n                }\r\n                else {\r\n                    subtitle.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.subtitle instanceof Array) {\r\n                    subtitle.texts = _this.options.subtitle.slice();\r\n                }\r\n                else {\r\n                    subtitle.texts.push(_this.options.subtitle.toString());\r\n                }\r\n            }\r\n            // get units object\r\n            var /** @type {?} */ units = {\r\n                text: \"\" + _this.options.units,\r\n                fontSize: _this.options.unitsFontSize,\r\n                fontWeight: _this.options.unitsFontWeight,\r\n                color: _this.options.unitsColor\r\n            };\r\n            // get total count of text lines to be shown\r\n            var /** @type {?} */ rowCount = 0, /** @type {?} */ rowNum = 1;\r\n            _this.options.showTitle && (rowCount += title.texts.length);\r\n            _this.options.showSubtitle && (rowCount += subtitle.texts.length);\r\n            // calc dy for each tspan for title\r\n            if (_this.options.showTitle) {\r\n                for (var _i = 0, _c = title.texts; _i < _c.length; _i++) {\r\n                    var span = _c[_i];\r\n                    title.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });\r\n                    rowNum++;\r\n                }\r\n            }\r\n            // calc dy for each tspan for subtitle\r\n            if (_this.options.showSubtitle) {\r\n                for (var _d = 0, _e = subtitle.texts; _d < _e.length; _d++) {\r\n                    var span = _e[_d];\r\n                    subtitle.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });\r\n                    rowNum++;\r\n                }\r\n            }\r\n            // create ID for gradient element\r\n            if (null === _this._gradientUUID) {\r\n                _this._gradientUUID = _this.uuid();\r\n            }\r\n            // Bring it all together\r\n            // Bring it all together\r\n            _this.svg = {\r\n                viewBox: \"0 0 \" + boxSize + \" \" + boxSize,\r\n                // Set both width and height to '100%' if it's responsive\r\n                width: _this.options.responsive ? '100%' : boxSize,\r\n                height: _this.options.responsive ? '100%' : boxSize,\r\n                backgroundCircle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: _this.options.radius + _this.options.outerStrokeWidth / 2 + _this.options.backgroundPadding,\r\n                    fill: _this.options.backgroundColor,\r\n                    fillOpacity: _this.options.backgroundOpacity,\r\n                    stroke: _this.options.backgroundStroke,\r\n                    strokeWidth: _this.options.backgroundStrokeWidth,\r\n                },\r\n                path: {\r\n                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)\r\n                    d: \"M \" + startPoint.x + \" \" + startPoint.y + \"\\n        A \" + _this.options.radius + \" \" + _this.options.radius + \" 0 \" + largeArcFlag + \" \" + sweepFlag + \" \" + endPoint.x + \" \" + endPoint.y,\r\n                    stroke: _this.options.outerStrokeColor,\r\n                    strokeWidth: _this.options.outerStrokeWidth,\r\n                    strokeLinecap: _this.options.outerStrokeLinecap,\r\n                    fill: 'none'\r\n                },\r\n                circle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: _this.options.radius - _this.options.space - _this.options.outerStrokeWidth / 2 - _this.options.innerStrokeWidth / 2,\r\n                    fill: 'none',\r\n                    stroke: _this.options.innerStrokeColor,\r\n                    strokeWidth: _this.options.innerStrokeWidth,\r\n                },\r\n                title: title,\r\n                units: units,\r\n                subtitle: subtitle,\r\n                image: {\r\n                    x: centre.x - _this.options.imageWidth / 2,\r\n                    y: centre.y - _this.options.imageHeight / 2,\r\n                    src: _this.options.imageSrc,\r\n                    width: _this.options.imageWidth,\r\n                    height: _this.options.imageHeight,\r\n                },\r\n                outerLinearGradient: {\r\n                    id: 'outer-linear-' + _this._gradientUUID,\r\n                    colorStop1: _this.options.outerStrokeColor,\r\n                    colorStop2: _this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : _this.options.outerStrokeGradientStopColor,\r\n                },\r\n                radialGradient: {\r\n                    id: 'radial-' + _this._gradientUUID,\r\n                    colorStop1: _this.options.backgroundColor,\r\n                    colorStop2: _this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : _this.options.backgroundGradientStopColor,\r\n                }\r\n            };\r\n            var _a, _b;\r\n        };\r\n        this.getAnimationParameters = function (previousPercent, currentPercent) {\r\n            var /** @type {?} */ MIN_INTERVAL = 10;\r\n            var /** @type {?} */ times, /** @type {?} */ step, /** @type {?} */ interval;\r\n            var /** @type {?} */ fromPercent = _this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);\r\n            var /** @type {?} */ toPercent = currentPercent < 0 ? 0 : _this.min(currentPercent, _this.options.maxPercent);\r\n            var /** @type {?} */ delta = Math.abs(Math.round(toPercent - fromPercent));\r\n            if (delta >= 100) {\r\n                // we will finish animation in 100 times\r\n                times = 100;\r\n                if (!_this.options.animateTitle && !_this.options.animateSubtitle) {\r\n                    step = 1;\r\n                }\r\n                else {\r\n                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            else {\r\n                // we will finish in as many times as the number of percent.\r\n                times = delta;\r\n                step = 1;\r\n            }\r\n            // Get the interval of timer\r\n            interval = Math.round(_this.options.animationDuration / times);\r\n            // Readjust all values if the interval of timer is extremely small.\r\n            if (interval < MIN_INTERVAL) {\r\n                interval = MIN_INTERVAL;\r\n                times = _this.options.animationDuration / interval;\r\n                if (!_this.options.animateTitle && !_this.options.animateSubtitle && delta > 100) {\r\n                    step = Math.round(100 / times);\r\n                }\r\n                else {\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            // step must be greater than 0.\r\n            if (step < 1) {\r\n                step = 1;\r\n            }\r\n            return { times: times, step: step, interval: interval };\r\n        };\r\n        this.animate = function (previousPercent, currentPercent) {\r\n            if (_this._timerSubscription && !_this._timerSubscription.closed) {\r\n                _this._timerSubscription.unsubscribe();\r\n            }\r\n            var /** @type {?} */ fromPercent = _this.options.startFromZero ? 0 : previousPercent;\r\n            var /** @type {?} */ toPercent = currentPercent;\r\n            var _a = _this.getAnimationParameters(fromPercent, toPercent), step = _a.step, interval = _a.interval;\r\n            var /** @type {?} */ count = fromPercent;\r\n            if (fromPercent < toPercent) {\r\n                _this._timerSubscription = timer(0, interval).subscribe(function () {\r\n                    count += step;\r\n                    if (count <= toPercent) {\r\n                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && count >= 100) {\r\n                            _this.draw(toPercent);\r\n                            _this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            _this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this.draw(toPercent);\r\n                        _this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                _this._timerSubscription = timer(0, interval).subscribe(function () {\r\n                    count -= step;\r\n                    if (count >= toPercent) {\r\n                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && toPercent >= 100) {\r\n                            _this.draw(toPercent);\r\n                            _this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            _this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this.draw(toPercent);\r\n                        _this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.emitClickEvent = function (event) {\r\n            if (_this.options.renderOnClick) {\r\n                _this.animate(0, _this.options.percent);\r\n            }\r\n            _this.onClick.emit(event);\r\n        };\r\n        this.applyOptions = function () {\r\n            // the options of <circle-progress> may change already\r\n            for (var _i = 0, _a = Object.keys(_this.options); _i < _a.length; _i++) {\r\n                var name_1 = _a[_i];\r\n                if (_this.hasOwnProperty(name_1) && _this[name_1] !== undefined) {\r\n                    _this.options[name_1] = _this[name_1];\r\n                }\r\n                else if (_this.templateOptions && _this.templateOptions[name_1] !== undefined) {\r\n                    _this.options[name_1] = _this.templateOptions[name_1];\r\n                }\r\n            }\r\n            // make sure key options valid\r\n            // make sure key options valid\r\n            _this.options.radius = Math.abs(+_this.options.radius);\r\n            _this.options.space = +_this.options.space;\r\n            _this.options.percent = +_this.options.percent > 0 ? +_this.options.percent : 0;\r\n            _this.options.maxPercent = Math.abs(+_this.options.maxPercent);\r\n            _this.options.animationDuration = Math.abs(_this.options.animationDuration);\r\n            _this.options.outerStrokeWidth = Math.abs(+_this.options.outerStrokeWidth);\r\n            _this.options.innerStrokeWidth = Math.abs(+_this.options.innerStrokeWidth);\r\n            _this.options.backgroundPadding = +_this.options.backgroundPadding;\r\n        };\r\n        this.getRelativeY = function (rowNum, rowCount) {\r\n            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)\r\n            var /** @type {?} */ initialOffset = -0.18, /** @type {?} */ offset = 1;\r\n            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';\r\n        };\r\n        this.min = function (a, b) {\r\n            return a < b ? a : b;\r\n        };\r\n        this.max = function (a, b) {\r\n            return a > b ? a : b;\r\n        };\r\n        this.uuid = function () {\r\n            // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\r\n            var /** @type {?} */ dt = new Date().getTime();\r\n            var /** @type {?} */ uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                var /** @type {?} */ r = (dt + Math.random() * 16) % 16 | 0;\r\n                dt = Math.floor(dt / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uuid;\r\n        };\r\n        this.findSvgElement = function () {\r\n            if (this.svgElement === null) {\r\n                var /** @type {?} */ tags = this.elRef.nativeElement.getElementsByTagName('svg');\r\n                if (tags.length > 0) {\r\n                    this.svgElement = tags[0];\r\n                }\r\n            }\r\n        };\r\n        this.checkViewport = function () {\r\n            _this.findSvgElement();\r\n            var /** @type {?} */ previousValue = _this.isInViewport;\r\n            _this.isInViewport = _this.isElementInViewport(_this.svgElement);\r\n            if (previousValue !== _this.isInViewport) {\r\n                _this.onViewportChanged.emit({ oldValue: previousValue, newValue: _this.isInViewport });\r\n            }\r\n        };\r\n        this.onScroll = function (event) {\r\n            _this.checkViewport();\r\n        };\r\n        this.loadEventsForLazyMode = function () {\r\n            if (_this.options.lazy) {\r\n                _this.document.addEventListener('scroll', _this.onScroll, true);\r\n                _this.window.addEventListener('resize', _this.onScroll, true);\r\n                if (_this._viewportChangedSubscriber === null) {\r\n                    _this._viewportChangedSubscriber = _this.onViewportChanged.subscribe(function (_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        newValue ? _this.render() : null;\r\n                    });\r\n                }\r\n                // svgElement must be created in DOM before being checked.\r\n                // Is there a better way to check the existence of svgElemnt?\r\n                var /** @type {?} */ _timer_1 = timer(0, 50).subscribe(function () {\r\n                    _this.svgElement === null ? _this.checkViewport() : _timer_1.unsubscribe();\r\n                });\r\n            }\r\n        };\r\n        this.unloadEventsForLazyMode = function () {\r\n            // Remove event listeners\r\n            // Remove event listeners\r\n            _this.document.removeEventListener('scroll', _this.onScroll, true);\r\n            _this.window.removeEventListener('resize', _this.onScroll, true);\r\n            // Unsubscribe onViewportChanged\r\n            if (_this._viewportChangedSubscriber !== null) {\r\n                _this._viewportChangedSubscriber.unsubscribe();\r\n                _this._viewportChangedSubscriber = null;\r\n            }\r\n        };\r\n        this.document = document;\r\n        this.window = this.document.defaultView;\r\n        Object.assign(this.options, defaultOptions);\r\n        Object.assign(this.defaultOptions, defaultOptions);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CircleProgressComponent.prototype.isDrawing = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return (this._timerSubscription && !this._timerSubscription.closed);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    CircleProgressComponent.prototype.isElementInViewport = /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    function (el) {\r\n        // Return false if el has not been created in page.\r\n        if (el === null || el === undefined)\r\n            return false;\r\n        // Check if the element is out of view due to a container scrolling\r\n        var /** @type {?} */ rect = el.getBoundingClientRect(), /** @type {?} */ parent = el.parentNode, /** @type {?} */ parentRect;\r\n        do {\r\n            parentRect = parent.getBoundingClientRect();\r\n            if (rect.top >= parentRect.bottom)\r\n                return false;\r\n            if (rect.bottom <= parentRect.top)\r\n                return false;\r\n            if (rect.left >= parentRect.right)\r\n                return false;\r\n            if (rect.right <= parentRect.left)\r\n                return false;\r\n            parent = parent.parentNode;\r\n        } while (parent != this.document.body);\r\n        // Check its within the document viewport\r\n        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight))\r\n            return false;\r\n        if (rect.bottom <= 0)\r\n            return false;\r\n        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth))\r\n            return false;\r\n        if (rect.right <= 0)\r\n            return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CircleProgressComponent.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.loadEventsForLazyMode();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CircleProgressComponent.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.unloadEventsForLazyMode();\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    CircleProgressComponent.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        this.render();\r\n        if ('lazy' in changes) {\r\n            changes[\"lazy\"].currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();\r\n        }\r\n    };\r\n    CircleProgressComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'circle-progress',\r\n                    template: \"\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" *ngIf=\\\"svg\\\"\\n             [attr.viewBox]=\\\"svg.viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"\\n             [attr.height]=\\\"svg.height\\\" [attr.width]=\\\"svg.width\\\" (click)=\\\"emitClickEvent($event)\\\" [attr.class]=\\\"options.class\\\">\\n            <defs>\\n                <linearGradient *ngIf=\\\"options.outerStrokeGradient\\\" [attr.id]=\\\"svg.outerLinearGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop1\\\"  [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </linearGradient>\\n                <radialGradient *ngIf=\\\"options.backgroundGradient\\\" [attr.id]=\\\"svg.radialGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop1\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </radialGradient>\\n            </defs>\\n            <ng-container *ngIf=\\\"options.showBackground\\\">\\n                <circle *ngIf=\\\"!options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        [attr.fill]=\\\"svg.backgroundCircle.fill\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n                <circle *ngIf=\\\"options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        attr.fill=\\\"url(#{{svg.radialGradient.id}})\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n            </ng-container>            \\n            <circle *ngIf=\\\"options.showInnerStroke\\\"\\n                    [attr.cx]=\\\"svg.circle.cx\\\"\\n                    [attr.cy]=\\\"svg.circle.cy\\\"\\n                    [attr.r]=\\\"svg.circle.r\\\"\\n                    [attr.fill]=\\\"svg.circle.fill\\\"\\n                    [attr.stroke]=\\\"svg.circle.stroke\\\"\\n                    [attr.stroke-width]=\\\"svg.circle.strokeWidth\\\"/>\\n            <ng-container *ngIf=\\\"+options.percent!==0 || options.showZeroOuterStroke\\\">\\n                <path *ngIf=\\\"!options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        [attr.stroke]=\\\"svg.path.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n                <path *ngIf=\\\"options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        attr.stroke=\\\"url(#{{svg.outerLinearGradient.id}})\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n            </ng-container>\\n            <text *ngIf=\\\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\\\"\\n                  alignment-baseline=\\\"baseline\\\"\\n                  [attr.x]=\\\"svg.circle.cx\\\"\\n                  [attr.y]=\\\"svg.circle.cy\\\"\\n                  [attr.text-anchor]=\\\"svg.title.textAnchor\\\">\\n                <ng-container *ngIf=\\\"options.showTitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.title.tspans\\\"\\n                           [attr.x]=\\\"svg.title.x\\\"\\n                           [attr.y]=\\\"svg.title.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.title.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.title.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.title.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n                <tspan *ngIf=\\\"options.showUnits\\\"\\n                       [attr.font-size]=\\\"svg.units.fontSize\\\"\\n                       [attr.font-weight]=\\\"svg.units.fontWeight\\\"\\n                       [attr.fill]=\\\"svg.units.color\\\">{{svg.units.text}}</tspan>\\n                <ng-container *ngIf=\\\"options.showSubtitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.subtitle.tspans\\\"\\n                           [attr.x]=\\\"svg.subtitle.x\\\"\\n                           [attr.y]=\\\"svg.subtitle.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.subtitle.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.subtitle.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.subtitle.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n            </text>\\n            <image *ngIf=\\\"options.showImage\\\" preserveAspectRatio=\\\"none\\\" \\n                [attr.height]=\\\"svg.image.height\\\"\\n                [attr.width]=\\\"svg.image.width\\\"\\n                [attr.xlink:href]=\\\"svg.image.src\\\"\\n                [attr.x]=\\\"svg.image.x\\\"\\n                [attr.y]=\\\"svg.image.y\\\"\\n            />\\n        </svg>\\n    \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CircleProgressComponent.ctorParameters = function () { return [\r\n        { type: CircleProgressOptions },\r\n        { type: ElementRef },\r\n        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n    ]; };\r\n    CircleProgressComponent.propDecorators = {\r\n        onClick: [{ type: Output }],\r\n        name: [{ type: Input }],\r\n        class: [{ type: Input }],\r\n        backgroundGradient: [{ type: Input }],\r\n        backgroundColor: [{ type: Input }],\r\n        backgroundGradientStopColor: [{ type: Input }],\r\n        backgroundOpacity: [{ type: Input }],\r\n        backgroundStroke: [{ type: Input }],\r\n        backgroundStrokeWidth: [{ type: Input }],\r\n        backgroundPadding: [{ type: Input }],\r\n        radius: [{ type: Input }],\r\n        space: [{ type: Input }],\r\n        percent: [{ type: Input }],\r\n        toFixed: [{ type: Input }],\r\n        maxPercent: [{ type: Input }],\r\n        renderOnClick: [{ type: Input }],\r\n        units: [{ type: Input }],\r\n        unitsFontSize: [{ type: Input }],\r\n        unitsFontWeight: [{ type: Input }],\r\n        unitsColor: [{ type: Input }],\r\n        outerStrokeGradient: [{ type: Input }],\r\n        outerStrokeWidth: [{ type: Input }],\r\n        outerStrokeColor: [{ type: Input }],\r\n        outerStrokeGradientStopColor: [{ type: Input }],\r\n        outerStrokeLinecap: [{ type: Input }],\r\n        innerStrokeColor: [{ type: Input }],\r\n        innerStrokeWidth: [{ type: Input }],\r\n        titleFormat: [{ type: Input }],\r\n        title: [{ type: Input }],\r\n        titleColor: [{ type: Input }],\r\n        titleFontSize: [{ type: Input }],\r\n        titleFontWeight: [{ type: Input }],\r\n        subtitleFormat: [{ type: Input }],\r\n        subtitle: [{ type: Input }],\r\n        subtitleColor: [{ type: Input }],\r\n        subtitleFontSize: [{ type: Input }],\r\n        subtitleFontWeight: [{ type: Input }],\r\n        imageSrc: [{ type: Input }],\r\n        imageHeight: [{ type: Input }],\r\n        imageWidth: [{ type: Input }],\r\n        animation: [{ type: Input }],\r\n        animateTitle: [{ type: Input }],\r\n        animateSubtitle: [{ type: Input }],\r\n        animationDuration: [{ type: Input }],\r\n        showTitle: [{ type: Input }],\r\n        showSubtitle: [{ type: Input }],\r\n        showUnits: [{ type: Input }],\r\n        showImage: [{ type: Input }],\r\n        showBackground: [{ type: Input }],\r\n        showInnerStroke: [{ type: Input }],\r\n        clockwise: [{ type: Input }],\r\n        responsive: [{ type: Input }],\r\n        startFromZero: [{ type: Input }],\r\n        showZeroOuterStroke: [{ type: Input }],\r\n        lazy: [{ type: Input }],\r\n        templateOptions: [{ type: Input, args: ['options',] }]\r\n    };\r\n    return CircleProgressComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nvar NgCircleProgressModule = /** @class */ (function () {\r\n    function NgCircleProgressModule() {\r\n    }\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    NgCircleProgressModule.forRoot = /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        return {\r\n            ngModule: NgCircleProgressModule,\r\n            providers: [\r\n                { provide: CircleProgressOptions, useValue: options }\r\n            ]\r\n        };\r\n    };\r\n    NgCircleProgressModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        CircleProgressComponent,\r\n                    ],\r\n                    exports: [\r\n                        CircleProgressComponent,\r\n                    ]\r\n                },] },\r\n    ];\r\n    return NgCircleProgressModule;\r\n}());\n\nexport { NgCircleProgressModule, CircleProgressOptions, CircleProgressComponent };\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TimerPage } from './timer.page';\n// Import ng-circle-progress\nimport { NgCircleProgressModule } from 'ng-circle-progress';\nconst routes: Routes = [\n  {\n    path: '',\n    component: TimerPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    NgCircleProgressModule.forRoot({\n      // set defaults here\n      radius: 100,\n      outerStrokeWidth: 16,\n      innerStrokeWidth: 8,\n      outerStrokeColor: \"#78C000\",\n      innerStrokeColor: \"#C7E596\",\n      animationDuration: 300 ,\n       animation: false,\n      responsive: true,\n      renderOnClick: true,\n      lazy : false\n    })\n  ],\n  declarations: [TimerPage]\n})\nexport class TimerPageModule {}\n","module.exports = \"<ion-header>\\n <ion-toolbar>\\n    <ion-title>Timer</ion-title><ion-buttons slot=\\\"end\\\">\\n        <ion-button fill=\\\"clear\\\" slot=\\\"icon-only\\\" (click)=\\\"goback()\\\">\\n          <ion-icon name=\\\"arrow-back\\\"></ion-icon>\\n        </ion-button>\\n      </ion-buttons>\\n    </ion-toolbar>\\n    </ion-header>\\n<ion-content padding>\\n    <ion-item class=\\\"top\\\" color=\\\"secondary\\\">\\n      <ion-label>Timer Duration</ion-label>\\n      <ion-datetime #myPicker display-format=\\\"mm:ss\\\" placeholder=\\\"Pick it\\\" [(ngModel)]=\\\"fullTime\\\" (ionChange)=\\\"updateMyDate(myPicker.value)\\\"></ion-datetime>\\n      \\n</ion-item>\\n<circle-progress (click)=\\\"startTimer()\\\"\\n\\n[percent]=\\\"percent\\\"\\n[maxPercent]=\\\"100\\\"\\n[radius]=\\\"radius\\\"\\n[showTitle]=\\\"false\\\"  \\n[showSubtitle]=\\\"true\\\"\\n[subtitle]=\\\"remainingTime\\\"\\n[subtitleFontSize]=\\\"40\\\"\\n[showUnits]=\\\"false\\\"\\n[outerStrokeWidth]=\\\"16\\\"\\n[outerStrokeColor]=\\\"'#8000FF'\\\"\\n[showZeroOuterStroke]=\\\"false\\\"\\n[backgroundStroke]=\\\"'#33003F'\\\"\\n[backgroundStrokeWidth]=\\\"3\\\"\\n[outerStrokeGradient]=\\\"true\\\"\\n[outerStrokeGradientStopColor]=\\\"'#FF00CB'\\\"\\n[showInnerStroke]=\\\"false\\\"\\n>\\n</circle-progress>\\n\\n<p>{{elapsed.h}}:{{elapsed.m}}:{{elapsed.s}}</p>\\n\\n<ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n  <ng-container *ngIf=\\\"timer == false; else running\\\">\\n    <ion-fab-button color=\\\"secondary\\\" (click)=\\\"startTimer()\\\">\\n        <ion-icon name=\\\"play\\\"></ion-icon>\\n      </ion-fab-button>\\n  </ng-container> \\n  <ng-template #running>\\n      <ion-fab-button color=\\\"secondary\\\" (click)=\\\"stopTimer()\\\">\\n          <ion-icon name=\\\"square\\\"></ion-icon>\\n        </ion-fab-button>\\n  </ng-template>\\n</ion-fab>\\n\\n</ion-content>\\n\\n\"","module.exports = \"p {\\n  font-size: 3em;\\n  color: #565656;\\n  width: 100%;\\n  text-align: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb25pa2FyYWovRGVza3RvcC9zd2VuMzI1L3N3ZW4zMjUtYTEvc3JjL2FwcC90aW1lci90aW1lci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFjO0VBQ2QsY0FBYztFQUNkLFdBQVc7RUFDWCxrQkFBa0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3RpbWVyL3RpbWVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInAge1xuICAgIGZvbnQtc2l6ZTogM2VtO1xuICAgIGNvbG9yOiAjNTY1NjU2O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavController} from '@ionic/angular';\n@Component({\n  selector: 'app-timer',\n  templateUrl: './timer.page.html',\n  styleUrls: ['./timer.page.scss'],\n})\nexport class TimerPage implements OnInit {\n\n  elapsed: any = {\n    h: '00',\n    m: '00',\n    s: '00'\n  }\n  progress:any = 0;\n  overallProgress:any = 0;\n  percent: number = 0;\n  radius: number = 100;\n  minutes: number = 1;\n  seconds: any = 10;\n  timer: any = false;\n  overallTimer: any = false;\n  fullTime: any = '00:02:00';\n\n\n  countDownTimer: any = false;\n  timeLeft: any = {\n    m: '00',\n    s: '00'\n  };\n  remainingTime = `${this.timeLeft.m}:${this.timeLeft.s}`;\n\n  constructor(private navCtrl: NavController) {\n\n  \n\n  }\n  ngOnInit() {\n  }\n  goback()\n  {\n    this.navCtrl.navigateForward(['/apphome']);\n\n  }\n  touchMe() {\n    console.log('touched');\n  }\n\n  startTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      clearInterval(this.countDownTimer);\n    }\n    if (!this.overallTimer) {\n      this.progressTimer();\n    }\n\n    this.timer = false;\n    this.percent = 0;\n    this.progress = 0;\n\n    let timeSplit = this.fullTime.split(':');\n    this.minutes = timeSplit[1];\n    this.seconds = timeSplit[2];\n\n    let totalSeconds = Math.floor(this.minutes * 60) + parseInt(this.seconds);\n    let secondsLeft = totalSeconds;\n\n    let forwardingTimer = () => {\n        if (this.percent == this.radius) clearInterval(this.timer)\n        this.percent = Math.floor((this.progress / totalSeconds) * 100)\n        ++this.progress\n      }\n\n    let backTimer = () => {\n        if (secondsLeft >= 0) {\n          this.timeLeft.m = Math.floor(secondsLeft / 60)\n          this.timeLeft.s = secondsLeft - (60 * this.timeLeft.m)\n          this.remainingTime = `${this.pad(this.timeLeft.m, 2)}:${this.pad(this.timeLeft.s, 2)}`\n          secondsLeft--;\n        }\n      }\n\n      // run once when clicked\n    forwardingTimer();\n    backTimer();\n\n      // timers start 1 second later\n    this.countDownTimer = setInterval(backTimer, 1000);\n    this.timer = setInterval(forwardingTimer, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.countDownTimer);\n    clearInterval(this.timer);\n    clearInterval(this.overallTimer);\n    this.timer = false;\n    this.percent = 0;\n    this.progress = 0;\n    this.countDownTimer = false;\n    this.overallTimer = false;\n    this.elapsed = {\n      h: '00',\n      m: '00',\n      s: '00'\n    }\n    this.timeLeft = {\n      m: '00',\n      s: '00'\n    }\n    this.remainingTime = `${this.pad(this.timeLeft.m, 2)}:${this.pad(this.timeLeft.s, 2)}`;\n  }\n\n  progressTimer() {\n    let ctdownDate = new Date();\n\n    this.overallTimer = setInterval(() => {\n      let now = new Date().getTime();\n\n      //  distance between now an the count down date\n      var dist = now - ctdownDate.getTime();\n\n      // calculating time for hours, minutes and seconds\n\n      this.elapsed.h = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      this.elapsed.m = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));\n      this.elapsed.s = Math.floor((dist % (1000 * 60)) / 1000);\n\n      this.elapsed.h = this.pad(this.elapsed.h, 2);\n      this.elapsed.m = this.pad(this.elapsed.m, 2);\n      this.elapsed.s = this.pad(this.elapsed.s, 2);\n     }, 1000)\n  }\n\n    pad(num, size) {\n      let x = num + '';\n      while (x.length < size) {x = '0' + x;}\n      return x;\n    }\n\n    updateMyDate($event) {\n      console.log($event.split(':'));\n    }\n  }\n\n\n"],"sourceRoot":""}